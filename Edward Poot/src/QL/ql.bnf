/** Lexical elements **/

/* stuff to ignore */
!whitespace : ' ' | '\t' | '\n' | '\r' ;
_lineComment : '/' '/' {.} '\n' ;
_blockComment : '/' '*' {. | '*'} '*' '/' ;
!comment : _lineComment | _blockComment ;

/* literals */
_int 		: '0'-'9' {'0'-'9'} ;
integer_lit	: _int ;
money_lit   : _int ',' _int ;
str_lit     : '"' {.} '"' ;
bool_lit    : 't' 'r' 'u' 'e' | 'f' 'a' 'l' 's' 'e' ;

/* number operators */
addop 	: '+' ;
mulop 	: '*' ;
subop 	: '-' ;
divop 	: '/' ;

/* logical operators */
andop 	: '&' '&' ;
orop 	: '|' '|' ;
notop 	:  '!' ;

/* comparison operators */
ltop 	: '<' ;
leqop 	: '<' '=' ;
gtop	: '>' ;
geqop	: '>' '=' ;
neqop	: '!' '=' ;
eqop	: '=' '=' ;

/* special characters */
lbrace	: '{' ;
rbrace	: '}' ;
lpar 	: '(' ;
rpar 	: ')' ;
col		: ':' ;
assign 	: '=' ;

/* identifiers */
ident : ('a'-'z' | 'A'-'Z') {('a'-'z' | 'A'-'Z'| '0'-'9' | '_')} ;

/** Syntax elements **/

<< import(
	"ql/ast"
	"ql/token"
	"ql/util"
    "ql/ast/vari"
) 
>>

Form    : "form" ident Block << ast.NewForm($1, $2) >> ;

/* types */
Type    : "integer" << vari.INT, nil >>
        | "boolean" << vari.BOOLEAN, nil >>
        | "string"  << vari.STRING, nil >>
        | "money"   << vari.MONEY, nil >>
        | "date"    << vari.DATE, nil >> 
        ;

Literal     : integer_lit | money_lit | bool_lit | str_lit;
NumLiteral  : integer_lit   << ast.NewIntLit((util.IntValue($0.(*token.Token).Lit))) >> ;
StrLiteral  : str_lit       << ast.NewStrLit($0) >> ;

Term    : Term mulop Factor << ast.NewMul($0, $2) >>
        | Term divop Factor << ast.NewDiv($0, $2) >>
        | Factor 
        ;

Factor  : NumLiteral ;

Bool    : "true"    << ast.NewBoolLit(ast.TRUE) >>
        | "false"   << ast.NewBoolLit(ast.FALSE) >>
        ;

VarDecl : VarId col Type << ast.NewVarDecl($0, $2) >> ;

VarId   : ident << ast.NewVarId($0) >> ;

Expr    : addop Expr        << ast.NewPos($1) >>
        | subop Expr        << ast.NewNeg($1) >>
        | notop Expr        << ast.NewNot($1) >>
        | Expr addop Term   << ast.NewAdd($0, $2) >>
        | Expr subop Term   << ast.NewSub($0, $2) >>
        | Expr eqop Expr    << ast.NewEq($0, $2) >>
        | Expr neqop Expr   << ast.NewNEq($0, $2) >>
        | Expr gtop Expr    << ast.NewGT($0, $2) >>
        | Expr ltop Expr    << ast.NewLT($0, $2) >>
        | Expr geqop Expr   << ast.NewGEq($0, $2) >>
        | Expr leqop Expr   << ast.NewLEq($0, $2) >>
        | Expr andop Expr   << ast.NewAnd($0, $2) >>
        | Expr orop Expr    << ast.NewOr($0, $2) >>
        | lpar Expr rpar    << $1, nil >>
        | Term
        | Bool
        | VarId
        ;

IfStmt  : "if" lpar Expr rpar Block                 << ast.NewIf($2, $4) >>
        | "if" lpar Expr rpar Block "else" Block    << ast.NewIfElse($2, $4, $6) >>
        ;

Question    : StrLiteral VarDecl                << ast.NewInputQuestion($0, $1) >>
            | StrLiteral VarDecl assign Expr    << ast.NewComputedQuestion($0, $1, $3) >>
            ;

Block   : lbrace StmtList rbrace    << $1, nil >>
        | lbrace rbrace             << ast.NewEmptyStmtList() >>
        ;

StmtList    : Stmt          << ast.NewStmtList($0) >>
            | StmtList Stmt << ast.AppendStmt($0, $1) >>
            ;

Stmt    : Question 
        | IfStmt
        ;
