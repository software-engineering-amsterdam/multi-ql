package symbols

import (
	"io/ioutil"
	"os"
	"ql/ast/expr"
	"ql/ast/vari"
	"strings"
	"testing"
)

func TestTypeCheckSymbolsAdd(t *testing.T) {
	symbols := NewTypeCheckSymbols()
	exampleVarId := vari.NewVarIdNoSourceInfo("testIdentifier")
	symbols.SetTypeForVarId(expr.NewBoolTypeNoSourceInfo(), exampleVarId)
	valueTypeExample := expr.NewBoolTypeNoSourceInfo()

	if lookupValue := symbols.GetTypeForVarId(exampleVarId); lookupValue != valueTypeExample {
		t.Errorf("TypeCheckSymbols not updated correctly, expected value %s for key %s, is %s", valueTypeExample, exampleVarId, lookupValue)
	}
}

func TestVarIdValueSymbolsAdd(t *testing.T) {
	symbols := NewVarIdValueSymbols()
	exampleVarId := vari.NewVarIdNoSourceInfo("testIdentifier")
	exprExample := expr.NewSubNoSourceInfo(expr.NewIntLitNoSourceInfo(1), expr.NewIntLitNoSourceInfo(2))
	symbols.SetExprForVarId(exprExample, exampleVarId)

	if lookupExprValue := symbols.GetExprForVarId(exampleVarId); lookupExprValue != exprExample {
		t.Errorf("VarIdValueSymbols not updated correctly, expected value %s for key %s, is %s", exprExample, exampleVarId, lookupExprValue)
	}
}

func TestVarIdValueSymbolsSaveToDisk(t *testing.T) {
	symbols := NewVarIdValueSymbols()
	exampleVarId := vari.NewVarIdNoSourceInfo("testIdentifier")
	symbols.SetExprForVarId(expr.NewStrLitNoSourceInfo("testValue"), exampleVarId)

	symbols.SaveToDisk()

	qlFile, err := ioutil.ReadFile("savedForm.json")
	if err != nil || !strings.Contains(string(qlFile), "testIdentifier\": \"testValue") {
		t.Errorf("Output file does not contain correct data %s", qlFile)
	}

	// clean up file
	removeOutputFileAfterTest()
}

// removeOutputFileAfterTest removes the exported JSON file generated by TestVarIdValueSymbolsSaveToDisk
func removeOutputFileAfterTest() {
	err := os.Remove("savedForm.json")

	if err != nil {
		panic(err)
	}
}
