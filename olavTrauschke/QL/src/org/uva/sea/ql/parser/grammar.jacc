%package org.uva.sea.ql.parser
%class Parser
%interface Tokens
%semantic org.uva.sea.ql.ast.ASTNode
%start form

%token BOOLEAN
%token DATE
%token DECIMAL
%token INT
%token MONEY
%token STRING

%token ';'
%token <Ident> IDENT
%token <Label> LABEL
%token <Bool> BOOLEAN_LITERAL
%token <Int> INT_LITERAL
%token <Str> STRING_LITERAL
%token ':' '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')'
%token '{' '}'
%token IF ELSE
%token FORM

%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

%type <Form> form
%type block
%type statements
%type conditionalStatement
%type <Question> question
%type type
%type <Expr> expr

%{
import java.io.FileNotFoundException;
import java.util.Set;
import org.uva.sea.ql.ast.*;
import org.uva.sea.ql.ast.expr.*;
%}

%%

form : FORM IDENT block { result = new Form($2, $3); };

block : '{' statements '}' { $$ = $2; };

statements : question ';' statements             { $$ = ((StatementSet) $3).add($1); }
           | conditionalStatement statements     { $$ = ((StatementSet) $2).add($1); }
           | /*empty*/                           { $$ = new StatementSet(); }
;

conditionalStatement : IF '(' expr ')' block ELSE block { $$ = new ConditionalStatement($3, $5, $7); }
                     | IF '(' expr ')' block            { $$ = new ConditionalStatement($3, $5, null); }
;

question : IDENT ':' STRING_LITERAL type      { $$ = new Question($1, new Label($3), $4); }
         | IDENT ':' STRING_LITERAL type expr { $$ = new ComputedQuestion($1, new Label($3), $4, $5); }
;

type : BOOLEAN { $$ = new Bool(null); }
     | DATE    { $$ = new Date(); }
     | DECIMAL { $$ = new Decimal(null); }
     | INT     { $$ = new Int(null); }
     | MONEY   { $$ = new Money(null, null); }
     | STRING  { $$ = new Str(null); }
;

expr : '+' expr %prec UPLUS { $$ = new Pos($2); }
     | '-' expr %prec UMIN  { $$ = new Neg($2); }
     | '!' expr %prec UNOT  { $$ = new Not($2); }
     | expr '*' expr        { $$ = new Mul($1, $3); }
     | expr '/' expr        { $$ = new Div($1, $3); }
     | expr '+' expr        { $$ = new Add($1, $3); }
     | expr '-' expr        { $$ = new Sub($1, $3); }
     | expr EQ expr         { $$ = new Eq($1, $3); }
     | expr NEQ expr        { $$ = new NEq($1, $3); }
     | expr '>' expr        { $$ = new GT($1, $3); }
     | expr '<' expr        { $$ = new LT($1, $3); }
     | expr GEQ expr        { $$ = new GEq($1, $3); }
     | expr LEQ expr        { $$ = new LEq($1, $3); }
     | expr AND expr        { $$ = new And($1, $3); }
     | expr OR expr         { $$ = new Or($1, $3); }
     | '(' expr ')'         { $$ = $2; }
     | IDENT
     | INT_LITERAL
     | BOOLEAN_LITERAL
     | STRING_LITERAL
;
		 

%%
private final Lexer lexer; 

private Form result;

public Parser(String filename) throws FileNotFoundException {
    lexer = new Lexer(filename);
    lexer.nextToken();
}

public Parser(Lexer theLexer) {
  theLexer.nextToken();
  lexer = theLexer; 
}

public Form getResult() {
  return result;
}

private void yyerror(String msg) { 
  System.err.println(msg); 
}
