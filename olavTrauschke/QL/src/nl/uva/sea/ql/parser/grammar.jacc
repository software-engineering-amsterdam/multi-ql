%package nl.uva.sea.ql.parser
%class Parser
%interface Tokens
%semantic nl.uva.sea.ql.ast.ASTNode
%start form

%token BOOLEAN
%token DATE
%token DECIMAL
%token INT
%token MONEY
%token STRING

%token ';'
%token <Ident> IDENT
%token <Label> LABEL
%token <Bool> BOOLEAN_LITERAL
%token <Int> INT_LITERAL
%token <Str> STRING_LITERAL
%token ':' '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')'
%token '{' '}'
%token IF ELSE
%token FORM

%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

%type <Form> form
%type block
%type statements
%type conditionalStatement
%type <Question> question
%type <Question> computedQuestion
%type <Expr> expr

%{
import java.io.FileNotFoundException;
import nl.uva.sea.ql.ast.*;
import nl.uva.sea.ql.ast.expr.*;
import nl.uva.sea.ql.ast.question.*;
%}

%%

form : FORM IDENT block { result = new Form($2, $3); };

block : '{' statements '}' { $$ = $2; };

statements : question ';' statements             { $$ = ((StatementSet) $3).add($1); }
           | conditionalStatement statements     { $$ = ((StatementSet) $2).add($1); }
           | /*empty*/                           { $$ = new StatementSet(); }
;

conditionalStatement : IF '(' expr ')' block ELSE block { $$ = new ConditionalStatement($3, $5, $7); }
                     | IF '(' expr ')' block            { $$ = new ConditionalStatement($3, $5, null); }
;

question : IDENT ':' STRING_LITERAL BOOLEAN   { $$ = new BooleanQuestion($1, new Label($3)); }
         | IDENT ':' STRING_LITERAL DATE      { $$ = new DateQuestion($1, new Label($3)); }
         | IDENT ':' STRING_LITERAL DECIMAL   { $$ = new DecimalQuestion($1, new Label($3)); }
         | IDENT ':' STRING_LITERAL INT       { $$ = new IntQuestion($1, new Label($3)); }
         | IDENT ':' STRING_LITERAL MONEY     { $$ = new MoneyQuestion($1, new Label($3)); }
         | IDENT ':' STRING_LITERAL STRING    { $$ = new StringQuestion($1, new Label($3)); }
         | computedQuestion
;

computedQuestion : IDENT ':' STRING_LITERAL BOOLEAN expr { $$ = new BooleanQuestion($1, new Label($3), $5); }
                 | IDENT ':' STRING_LITERAL DATE expr    { $$ = new DateQuestion($1, new Label($3), $5); }
                 | IDENT ':' STRING_LITERAL DECIMAL expr { $$ = new DecimalQuestion($1, new Label($3), $5); }
                 | IDENT ':' STRING_LITERAL INT expr     { $$ = new IntQuestion($1, new Label($3), $5); }
                 | IDENT ':' STRING_LITERAL MONEY expr   { $$ = new MoneyQuestion($1, new Label($3), $5); }
                 | IDENT ':' STRING_LITERAL STRING expr  { $$ = new StringQuestion($1, new Label($3), $5); }
;

expr : '+' expr %prec UPLUS { $$ = $2; }
     | '-' expr %prec UMIN  { $$ = new Neg($2); }
     | '!' expr %prec UNOT  { $$ = new Not($2); }
     | expr '*' expr        { $$ = new Mul($1, $3); }
     | expr '/' expr        { $$ = new Div($1, $3); }
     | expr '+' expr        { $$ = new Add($1, $3); }
     | expr '-' expr        { $$ = new Sub($1, $3); }
     | expr EQ expr         { $$ = new Eq($1, $3); }
     | expr NEQ expr        { $$ = new NEq($1, $3); }
     | expr '>' expr        { $$ = new GT($1, $3); }
     | expr '<' expr        { $$ = new LT($1, $3); }
     | expr GEQ expr        { $$ = new GEq($1, $3); }
     | expr LEQ expr        { $$ = new LEq($1, $3); }
     | expr AND expr        { $$ = new And($1, $3); }
     | expr OR expr         { $$ = new Or($1, $3); }
     | '(' expr ')'         { $$ = $2; }
     | IDENT
     | INT_LITERAL
     | BOOLEAN_LITERAL
     | STRING_LITERAL
;
		 

%%
private final Lexer lexer; 

private Form result;

/**
 * Constructor for objects of this class.
 * 
 * @param filename a <code>String</code> containing the path to the file
 *                  the constructed <code>Parser</code> should parse
 * @throws FileNotFoundException when the file specified by
 *                                  <code>filename</code> could not be read
 */
public Parser(String filename) throws FileNotFoundException {
    lexer = new Lexer(filename);
    lexer.nextToken();
}

/**
 * Constructor for objects of this class.
 * 
 * @param theLexer a <code>Lexer</code> analyzing the source the constructed
                    <code>Parser</code> should parse
 */
public Parser(Lexer theLexer) {
  theLexer.nextToken();
  lexer = theLexer; 
}

/**
 * Get the result of the last parsing <code>this Parser</code> performed.
 */
public Form getResult() {
  return result;
}

/**
 * Print parse errors to the system's error output for debugging
 */
private void yyerror(String msg) { 
  System.err.println(msg); 
}
