%{   
open Microsoft.FSharp.Collections
open Statements   
%}   
  
%token <string> ID   
%token <string> STRING
%token <string> QTYPE
%token <int> INT   
%token <float> FLOAT   
  

%token QUESTION FORM 
// ()
%token OPEN_BRACKET CLOSE_BRACKET
// []
%token OPEN_SQBRACKET CLOSE_SQBRACKET
// {}
%token OPEN_BRACE CLOSE_BRACE
// :
%token COLON
%token IF 
%token AND OR BITWISEAND BITWISEOR

//refactor this out later
%token MONEY INTEGER STRINGTYPE
 
%token COMMA   
%token EQ LT LE GT GE   
%token EOF   
  
// start   
%start start   
%type <Statements.Questionary> start
%type <Statements.Form> form   
%type <Statements.Question> questionList

%%   
  
start:   
    | form EOF      {   { Questionary = [$1] }  }
    | form start	{   { Questionary = [$1] }  }

form: 
     FORM ID OPEN_BRACE
	 contents 
	 CLOSE_BRACE { 
                        {   Identifier = $2;
                            Questions = [$4]  }
                        }
contents: 
    | questionList { }
    | statement { }

questions: 
	questionList	{  }

statement: 
    IF OPEN_BRACKET conditionList CLOSE_BRACKET OPEN_BRACE
        contents
    CLOSE_BRACE  { }

condition:
    | condition AND condition { }
    | condition BITWISEAND condition { }
    | condition BITWISEOR condition { }
    | condition OR condition { }
    | ID { }

conditionList:   
    | value op value                    { Cond($1, $2, $3) }   
    | value op value AND conditionList  { And(Cond($1, $2, $3), $5) }   
    | value op value OR conditionList   { Or(Cond($1, $2, $3), $5) }      

op: EQ { Eq } | LT { Lt } | LE { Le } | GT { Gt } | GE { Ge }   

questionList:  
	STRING STRING COLON STRING	  { 
                            { QuestionText = $1;
                              Identifier = $2;
                              QuestionType = $4 }
                      }

value:   
    | INT                   { Int($1) }   
    | FLOAT                 { Float($1) }   
    | ID                    { String($1) }
    | STRING                { String($1) }

%%