// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
   
open Microsoft.FSharp.Collections
open Statements   

# 11 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EMPTY
  | EOF
  | EQ
  | LT
  | LE
  | GT
  | GE
  | COMMA
  | DOUBLE_QUOTE
  | MONEY
  | INTEGER
  | STRINGTYPE
  | AND
  | OR
  | BITWISEAND
  | BITWISEOR
  | IF
  | COLON
  | OPEN_BRACE
  | CLOSE_BRACE
  | OPEN_SQBRACKET
  | CLOSE_SQBRACKET
  | OPEN_BRACKET
  | CLOSE_BRACKET
  | QUESTION
  | FORM
  | FLOAT of (float)
  | INT of (int)
  | QTYPE of (string)
  | STRING of (string)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EMPTY
    | TOKEN_EOF
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_COMMA
    | TOKEN_DOUBLE_QUOTE
    | TOKEN_MONEY
    | TOKEN_INTEGER
    | TOKEN_STRINGTYPE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_BITWISEAND
    | TOKEN_BITWISEOR
    | TOKEN_IF
    | TOKEN_COLON
    | TOKEN_OPEN_BRACE
    | TOKEN_CLOSE_BRACE
    | TOKEN_OPEN_SQBRACKET
    | TOKEN_CLOSE_SQBRACKET
    | TOKEN_OPEN_BRACKET
    | TOKEN_CLOSE_BRACKET
    | TOKEN_QUESTION
    | TOKEN_FORM
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_QTYPE
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_quest
    | NONTERM_form
    | NONTERM_start
    | NONTERM_questions
    | NONTERM_op
    | NONTERM_questionList
    | NONTERM_question
    | NONTERM_value

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EMPTY  -> 0 
  | EOF  -> 1 
  | EQ  -> 2 
  | LT  -> 3 
  | LE  -> 4 
  | GT  -> 5 
  | GE  -> 6 
  | COMMA  -> 7 
  | DOUBLE_QUOTE  -> 8 
  | MONEY  -> 9 
  | INTEGER  -> 10 
  | STRINGTYPE  -> 11 
  | AND  -> 12 
  | OR  -> 13 
  | BITWISEAND  -> 14 
  | BITWISEOR  -> 15 
  | IF  -> 16 
  | COLON  -> 17 
  | OPEN_BRACE  -> 18 
  | CLOSE_BRACE  -> 19 
  | OPEN_SQBRACKET  -> 20 
  | CLOSE_SQBRACKET  -> 21 
  | OPEN_BRACKET  -> 22 
  | CLOSE_BRACKET  -> 23 
  | QUESTION  -> 24 
  | FORM  -> 25 
  | FLOAT _ -> 26 
  | INT _ -> 27 
  | QTYPE _ -> 28 
  | STRING _ -> 29 
  | ID _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EMPTY 
  | 1 -> TOKEN_EOF 
  | 2 -> TOKEN_EQ 
  | 3 -> TOKEN_LT 
  | 4 -> TOKEN_LE 
  | 5 -> TOKEN_GT 
  | 6 -> TOKEN_GE 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_DOUBLE_QUOTE 
  | 9 -> TOKEN_MONEY 
  | 10 -> TOKEN_INTEGER 
  | 11 -> TOKEN_STRINGTYPE 
  | 12 -> TOKEN_AND 
  | 13 -> TOKEN_OR 
  | 14 -> TOKEN_BITWISEAND 
  | 15 -> TOKEN_BITWISEOR 
  | 16 -> TOKEN_IF 
  | 17 -> TOKEN_COLON 
  | 18 -> TOKEN_OPEN_BRACE 
  | 19 -> TOKEN_CLOSE_BRACE 
  | 20 -> TOKEN_OPEN_SQBRACKET 
  | 21 -> TOKEN_CLOSE_SQBRACKET 
  | 22 -> TOKEN_OPEN_BRACKET 
  | 23 -> TOKEN_CLOSE_BRACKET 
  | 24 -> TOKEN_QUESTION 
  | 25 -> TOKEN_FORM 
  | 26 -> TOKEN_FLOAT 
  | 27 -> TOKEN_INT 
  | 28 -> TOKEN_QTYPE 
  | 29 -> TOKEN_STRING 
  | 30 -> TOKEN_ID 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_quest 
    | 2 -> NONTERM_quest 
    | 3 -> NONTERM_form 
    | 4 -> NONTERM_start 
    | 5 -> NONTERM_questions 
    | 6 -> NONTERM_op 
    | 7 -> NONTERM_op 
    | 8 -> NONTERM_op 
    | 9 -> NONTERM_op 
    | 10 -> NONTERM_op 
    | 11 -> NONTERM_questionList 
    | 12 -> NONTERM_questionList 
    | 13 -> NONTERM_question 
    | 14 -> NONTERM_value 
    | 15 -> NONTERM_value 
    | 16 -> NONTERM_value 
    | 17 -> NONTERM_value 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EMPTY  -> "EMPTY" 
  | EOF  -> "EOF" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | COMMA  -> "COMMA" 
  | DOUBLE_QUOTE  -> "DOUBLE_QUOTE" 
  | MONEY  -> "MONEY" 
  | INTEGER  -> "INTEGER" 
  | STRINGTYPE  -> "STRINGTYPE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | BITWISEAND  -> "BITWISEAND" 
  | BITWISEOR  -> "BITWISEOR" 
  | IF  -> "IF" 
  | COLON  -> "COLON" 
  | OPEN_BRACE  -> "OPEN_BRACE" 
  | CLOSE_BRACE  -> "CLOSE_BRACE" 
  | OPEN_SQBRACKET  -> "OPEN_SQBRACKET" 
  | CLOSE_SQBRACKET  -> "CLOSE_SQBRACKET" 
  | OPEN_BRACKET  -> "OPEN_BRACKET" 
  | CLOSE_BRACKET  -> "CLOSE_BRACKET" 
  | QUESTION  -> "QUESTION" 
  | FORM  -> "FORM" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | QTYPE _ -> "QTYPE" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EMPTY  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | DOUBLE_QUOTE  -> (null : System.Object) 
  | MONEY  -> (null : System.Object) 
  | INTEGER  -> (null : System.Object) 
  | STRINGTYPE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | BITWISEAND  -> (null : System.Object) 
  | BITWISEOR  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | OPEN_BRACE  -> (null : System.Object) 
  | CLOSE_BRACE  -> (null : System.Object) 
  | OPEN_SQBRACKET  -> (null : System.Object) 
  | CLOSE_SQBRACKET  -> (null : System.Object) 
  | OPEN_BRACKET  -> (null : System.Object) 
  | CLOSE_BRACKET  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | FORM  -> (null : System.Object) 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | QTYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 0us; 1us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 4us; 5us; 1us; 65535us; 4us; 8us; 0us; 65535us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 3us; 5us; 6us; 7us; 9us; 11us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; |]
let _fsyacc_action_rows = 13
let _fsyacc_actionTableElements = [|1us; 32768us; 25us; 2us; 0us; 49152us; 1us; 32768us; 30us; 3us; 1us; 32768us; 18us; 4us; 2us; 32768us; 0us; 7us; 29us; 9us; 1us; 32768us; 19us; 6us; 0us; 16388us; 0us; 16395us; 0us; 16396us; 1us; 32768us; 29us; 10us; 1us; 32768us; 17us; 11us; 1us; 32768us; 29us; 12us; 0us; 16397us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 7us; 10us; 12us; 13us; 14us; 15us; 17us; 19us; 21us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 1us; 5us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 1us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 8us; 8us; 8us; 8us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 16388us; 16395us; 16396us; 65535us; 65535us; 65535us; 16397us; |]
let _fsyacc_reductions ()  =    [| 
# 271 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Statements.Form)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 280 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'form)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                             { Questionary = [_1] }  
                   )
# 43 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'quest));
# 291 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'form)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Statements.Form)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                          { Questionary = [_1] }  
                   )
# 44 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'quest));
# 303 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Statements.Form)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                   _1 
                   )
# 46 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'form));
# 314 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'questionList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                     
                                             {   Identifier = _2;
                                                 Questions = _4  }
                                             
                   )
# 51 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : Statements.Form));
# 329 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'questionList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                     _1 
                   )
# 57 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'questions));
# 340 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                              Eq 
                   )
# 60 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'op));
# 350 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                          Lt 
                   )
# 60 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'op));
# 360 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                                      Le 
                   )
# 60 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'op));
# 370 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                                                  Gt 
                   )
# 60 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'op));
# 380 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                                                              Ge 
                   )
# 60 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'op));
# 390 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                                       []  
                   )
# 63 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'questionList));
# 400 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Statements.Question)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                                    [_1] 
                   )
# 64 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'questionList));
# 411 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                                        
                                                 { QuestionText = _1;
                                                   Identifier = _2;
                                                   QuestionType = _4 }
                                           
                   )
# 67 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : Statements.Question));
# 428 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                                   Int(_1) 
                   )
# 74 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'value));
# 439 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                                   Float(_1) 
                   )
# 75 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'value));
# 450 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                                   String(_1) 
                   )
# 76 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'value));
# 461 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                                                                          String(_2) 
                   )
# 77 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fsp"
                 : 'value));
|]
# 473 "C:\Users\Felix\Documents\Git\multi-ql\FelixBarten\QL\QL\Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Statements.Form =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
