/* description: Parses end executes mathematical expressions. */

/* lexical grammar */
%lex
%%

\s+                   /* skip whitespace */
[0-9]+("."[0-9]+)?\b  return 'NUMBER'
"*"                   return '*'
"/"                   return '/'
"-"                   return '-'
"+"                   return '+'
"^"                   return '^'
"("                   return '('
")"                   return ')'
"<="                  return '<='
">="                  return '>='
"=="                  return '=='
"!="                  return '!='
">"                   return '>'
"<"                   return '<'
"&&"                  return '&&'
"||"                  return '||'
"!"                   return '!'
"PI"                  return 'PI'
"E"                   return 'E'
"true"                return 'TRUE'
"false"                return 'FALSE'
<<EOF>>               return 'EOF'
.                     return 'INVALID'

/lex

/* operator associations and precedence */
%left '!'
%left '&&' '||'
%left '<' '>'
$lest '<=' '>=' '!=' '=='
%left '+' '-'
%left '*' '/'
%left '^'
%left UMINUS

%start expressions

%% /* language grammar */

expressions
    : e EOF
        {return $1;}
    | b EOF
        {return $1;}
    ;

b
    : 

    '!' b %prec '!'
        {$$ = !$2;}
    | '!' e %prec '!'
        {$$ = !$2;}
    | b '||' b
        {$$ = $1||$3;}
    | b '||' e
        {$$ = $1||$3;}
    | b '&&' b
        {$$ = $1&&$3;}
    | b '&&' e
        {$$ = $1&&$3;}
    | '(' b ')'
        {$$ = $2;}
    | TRUE
        {$$ = true;}
    | FALSE
        {$$ = false;}
    ;

e
    : e '+' e
        {$$ = $1+$3;}
    | e '-' e
        {$$ = $1-$3;}
    | e '*' e
        {$$ = $1*$3;}
    | e '/' e
        {$$ = $1/$3;}
    | e '<' e
        {$$ = $1<$3;}
    | e '>' e
        {$$ = $1>$3;}
    | e '<=' e
        {$$ = $1<=$3;}
    | e '>=' e
        {$$ = $1>=$3;}
    | e '==' e
        {$$ = $1==$3;}
    | e '!=' e
        {$$ = $1!=$3;}
    | e '^' e
        {$$ = Math.pow($1, $3);}
    | '-' e %prec UMINUS
        {$$ = -$2;}
    | '(' e ')'
        {$$ = $2;}
    | NUMBER
        {$$ = Number(yytext);}
    | E
        {$$ = Math.E;}
    | PI
        {$$ = Math.PI;}
    ;
