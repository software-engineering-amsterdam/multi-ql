grammar QL;

@parser::header
{

import eu.bankersen.kevin.ql.ast.expr.*;
import eu.bankersen.kevin.ql.ast.expr.logic.*;
import eu.bankersen.kevin.ql.ast.expr.math.*;
import eu.bankersen.kevin.ql.ast.stat.*;
import eu.bankersen.kevin.ql.ast.form.*;
import eu.bankersen.kevin.ql.ast.var.*;
}

file :  form* EOF
;

form returns [Form result]
	:	('Form'|'form') + ID + block { $result = new Form($ID.text, $block.result); }
	;

block returns [Block result]
	@init {
		$result = new Block(); //Must be set at initialisation, otherwise cant add
	}
	: '{' + (ifStat[$result] | question[$result] ) + '}'
	;

question[Block result]
	
	: ID + STR + type + '(' + orExpr + ')'
	{
		$result.add(new Question(new Variable($ID.text, $type.result, $orExpr.result), $STR.text));
	}
		
	|	ID + STR + type
	
	{  
		$result.add(new Question(new Variable($ID.text, $type.result), $STR.text));
	}
	;

ifStat[Block arg]
	:	'if' + '(' + orExpr + ')' + block 
	{ 
		$arg.add(new IFStat($orExpr.result, $block.result));
	}
	;

mulExpr returns [Expr result]
	:   lhs=unExpr { $result=$lhs.result; } ( op=( '*' | '/' ) rhs=unExpr 
	{ 
		if ($op.text.equals("*")) {
			$result = new Mul($result, $rhs.result);
		}
		if ($op.text.equals("/")) {
			$result = new Div($result, $rhs.result);      
		}
	})*
	;


addExpr returns [Expr result]
	:   lhs=mulExpr { $result=$lhs.result; } ( op=('+' | '-') rhs=mulExpr
	{ 
		if ($op.text.equals("+")) {
			$result = new Add($result, $rhs.result);
		}
		if ($op.text.equals("-")) {
			$result = new Sub($result, $rhs.result);      
		}
	})*
	;

relExpr returns [Expr result]
	:   lhs=addExpr { $result=$lhs.result; } ( op=('<'|'<='|'>'|'>='|'=='|'!=') rhs=addExpr 
	{ 
		if ($op.text.equals("<")) {
			$result = new LT($result, $rhs.result);
		}
		if ($op.text.equals("<=")) {
			$result = new LEq($result, $rhs.result);      
		}
		if ($op.text.equals(">")) {
			$result = new GT($result, $rhs.result);
		}
		if ($op.text.equals(">=")) {
			$result = new GEq($result, $rhs.result);      
		}
		if ($op.text.equals("==")) {
			$result = new Eq($result, $rhs.result);
		}
		if ($op.text.equals("!=")) {
			$result = new NEq($result, $rhs.result);
		}
	})*
	;


unExpr returns [Expr result]
	:	'+' x=unExpr { $result = new Pos($x.result); }
	|	'-' x=unExpr { $result = new Neg($x.result); }
	|	'!' x=unExpr { $result = new Not($x.result); }
	|	y=primary    { $result = $y.result; }
	;    

primary returns [Expr result]
	:	literal
	|	identifier //Maybe make a variable class?
	|	'(' orExpr ')'
	;

literal
	:	intLiteral {System.out.println($result);}
	|	strLiteral 
	|	boolLiteral
	;
	
intLiteral returns [Expr result]
	: INT { $result = new intLiteral(Integer.valueOf($INT.text)); }
	;
			
strLiteral returns [Expr result]
	: STR { $result = new strLiteral($STR.text); }
	;

boolLiteral returns [Expr result]
	: BOOL { $result = new boolLiteral(Boolean.valueOf($BOOL.text)); }
	;

	
identifier returns [Expr result]
	: ID
	{   
		$result = new Identifier($ID.text);
	}
	;
	
type returns [Type result]
	: BOOLEAN	{ $result = Type.BOOLEAN; }
	| STRING	{ $result = Type.STRING; }
	| INTEGER	{ $result = Type.INTEGER; }
	| MONEY		{ $result = Type.MONEY; }
	;

orExpr returns [Expr result]
	:   lhs=andExpr { $result = $lhs.result; } ( '||' rhs=andExpr { $result = new Or($result, $rhs.result); } )*
	;

andExpr returns [Expr result]
	:   lhs=relExpr { $result=$lhs.result; } ( '&&' rhs=relExpr { $result = new And($result, $rhs.result); } )*
	;
	

// Tokens
COMMENT 		:   '/*' .*? '*/' -> channel(HIDDEN);
LINE_COMMENT 	:   '//' ~[\r\n]* -> channel(HIDDEN);
WS  	:	(' ' | '\t' | '\n' | '\r') -> channel(HIDDEN);

BOOLEAN :   'bool';
INTEGER :   'int';
STRING  :   'str';
MONEY  	:   'money';

BOOL	:	'true' | 'false';
INT		:   ('0'..'9')+;
STR 	:   '"' .*? '"';
ID		:	('a'..'z'|'A'..'Z')('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
