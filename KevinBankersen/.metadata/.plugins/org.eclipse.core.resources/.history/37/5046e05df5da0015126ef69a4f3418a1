package eu.bankersen.kevin.ql.context;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.esotericsoftware.minlog.Log;

import eu.bankersen.kevin.ql.ast.Type;
import eu.bankersen.kevin.ql.ast.form.Form;
import eu.bankersen.kevin.ql.context.errors.TypeCheckingError;
import eu.bankersen.kevin.ql.util.testing.DataListener;
import eu.bankersen.kevin.ql.util.testing.ViewListener;

public class Context implements ViewListener {
    
    private final String formName;
    private final Form form;
    private final Map<String, Symbol> symbolTable;
    private final Set<TypeCheckingError> errorList;
    private List<DataListener> dataListeners;
    

    public Context(Form form, String formName) {
	this.form = form;
	this.formName = formName;
	this.symbolTable = new HashMap<>();
	this.errorList = new HashSet<>();
	this.dataListeners = new ArrayList<DataListener>();
    }
    
    public String getFormName() {
	return formName;
    }
    
    public Symbol getSymbol(String symbol) {
	return symbolTable.get(symbol);
    }
    
    public Boolean checkID(String name) {
	return symbolTable.containsKey(name);
    }
    
    public void addSymbol(String symbol, Type type, Object value) {
	symbolTable.put(symbol, new Symbol(type, value));
    }
    
    public void updateSymbol(String name, Object value) {
	Symbol symbol = symbolTable.get(name);
	symbol.setValue(value);
	symbolTable.put(name, symbol);
    }
    
    public void setVisibility(String name, Boolean active) {
	Symbol symbol = symbolTable.get(name);
	symbol.setActive(active);
	symbolTable.put(name, symbol);
    }
    
    public void addError(TypeCheckingError error) {
	Log.debug(error.toString());
	errorList.add(error);
    }
    
    public Set<TypeCheckingError> getErrors() {
	return errorList;
	
    }
    
    public void addDataListener(DataListener listener) {
	dataListeners.add(listener);
    }
    
    private void dataUpdate(Object data) {
	dataListeners.forEach(listener -> listener.dataUpdate(data));
    }

    @Override
    public void viewUpdate(Object data) {
	System.out.println("This is the data i get: " + data.toString());	
    }

}