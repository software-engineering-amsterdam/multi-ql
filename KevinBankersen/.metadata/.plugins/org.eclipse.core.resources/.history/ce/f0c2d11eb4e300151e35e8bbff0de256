package eu.bankersen.kevin.ql.typechecker.symboltable;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eu.bankersen.kevin.ql.ast.AbstractVisitor;
import eu.bankersen.kevin.ql.ast.form.Body;
import eu.bankersen.kevin.ql.ast.form.Form;
import eu.bankersen.kevin.ql.ast.stat.ComputedQuestion;
import eu.bankersen.kevin.ql.ast.stat.ElseStatement;
import eu.bankersen.kevin.ql.ast.stat.IFStatement;
import eu.bankersen.kevin.ql.ast.stat.NormalQuestion;
import eu.bankersen.kevin.ql.ast.type.Type;
import eu.bankersen.kevin.ql.typechecker.errors.TypeCheckError;
import eu.bankersen.kevin.ql.typechecker.warnings.TypeCheckWarning;

public class SymbolTableBuilder extends AbstractVisitor {

    private final Map<String, List<Symbol>> symbolTable;
    private final Set<TypeCheckError> errorList;
    private final Set<TypeCheckWarning> warningList;

    public SymbolTableBuilder(Form form) {
	this.symbolTable = new LinkedHashMap<>();
	this.errorList = new HashSet<>();
	this.warningList = new HashSet<>();
	visit(form);
    }

    @Override
    public void visit(Form o) {
	o.body().accept(this);
    }

    @Override
    public void visit(Body o) {
	o.statements().forEach(s -> s.accept(this));
    }

    @Override
    public void visit(IFStatement o) {
	o.body().statements().forEach(s -> s.accept(this));
    }

    @Override
    public void visit(ElseStatement o) {
	o.body().statements().forEach(s -> s.accept(this));
	o.elseBody().statements().forEach(s -> s.accept(this));
    }

    @Override
    public void visit(NormalQuestion o) {
	addSymbol(false, o.name(), o.text(), o.type());

    }

    @Override
    public void visit(ComputedQuestion o) {
	addSymbol(true, o.name(), o.text(), o.type());
    }

    private void addSymbol(Boolean computed, String name, String question, Type type) {
	Symbol symbol = new Symbol(computed, name, question, type, null);
	List<Symbol> list;

	if (symbolTable.containsKey(name)) {
	    list = symbolTable.get(name);
	    list.add(symbol);
	} else {
	    list = new ArrayList<>();
	    list.add(symbol);
	}
	symbolTable.put(name, list);
    }

    public SymbolTable getSymbolTable() {
	return convertRawSymboTable(symbolTable);
    }

    public Set<TypeCheckError> getErrors() {
	return errorList;
    }
    
    public Set<TypeCheckError> getWarnings() {
	return warningList;
    }

    private SymbolTable convertRawSymboTable(Map<String, List<Symbol>> rawSymbolTable) {

	SymbolTable table = new SymbolTable();
	Symbol symbol;
	for (String key : rawSymbolTable.keySet()) {
	    if (rawSymbolTable.get(key).size() == 1) {
		symbol = rawSymbolTable.get(key).get(0);
	    } else {
		//Analyze the problem somewhere else?
		System.out.println("More then one");
		//For now we will return the first one
		symbol = rawSymbolTable.get(key).get(0);
	    }
	    table.addSymbol(key, symbol);
	}
	return  table;
    }    
}
