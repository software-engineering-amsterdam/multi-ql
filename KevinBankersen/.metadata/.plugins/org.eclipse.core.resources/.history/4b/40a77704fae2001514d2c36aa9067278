package eu.bankersen.kevin.ql.ast.stat;

import com.esotericsoftware.minlog.Log;

import eu.bankersen.kevin.ql.ast.expr.EvaluateExeption;
import eu.bankersen.kevin.ql.ast.expr.Expr;
import eu.bankersen.kevin.ql.ast.type.Type;
import eu.bankersen.kevin.ql.context.Context;
import eu.bankersen.kevin.ql.context.symboltable.SymbolTable;
import eu.bankersen.kevin.ql.context.symboltable.SymbolTableBuilder;

public abstract class Question extends Statement {

    private final String name;
    private final String text;
    private final Type type;
    private final Expr expr;
    private final int line;

    public Question(String name, String text, Type type, Expr expr, int line) {
	this.name = name;
	this.text = text.substring(1, text.length() - 1);
	this.type = type;
	this.expr = expr;
	this.line = line;
    }

    public String getText() {
	return text;
    }
    
    public Expr expr() {
	return expr;
    }

    public int line() {
	return line;
    }

    public Type getType() {
	return type;
    }
    
    public String getName() {
	return name;
    }
    
    public SymbolTable visible(SymbolTable symbolTable, Boolean visible) {
	symbolTable.setVisibility(this.getName(), visible);
	return symbolTable;
    }
    
    @Override
    public SymbolTable evalStatement(SymbolTable symbolTable) {
	
	try {
	    Object value = expr.eval(symbolTable);
	    symbolTable.updateSymbol(name, value);
	} catch (EvaluateExeption  e) {
	    Log.debug("Cannot evaluate expression yet");
	}
	return symbolTable;
    }
}
