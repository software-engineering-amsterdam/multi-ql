package eu.bankersen.kevin.ql.ast.expr;

import java.math.BigDecimal;

import eu.bankersen.kevin.ql.ast.type.IntType;
import eu.bankersen.kevin.ql.ast.type.Type;
import eu.bankersen.kevin.ql.context.Context;
import eu.bankersen.kevin.ql.context.SymbolTable;
import eu.bankersen.kevin.ql.context.errors.ExprTypeError;

public abstract class NumberExpr extends Expr {

    private final Expr lhs;
    private final Expr rhs;
    private final int line;

    public NumberExpr(Expr lhs, Expr rhs, int line) {
	super(new IntType());
	this.lhs = lhs;
	this.rhs = rhs;
	this.line = line;
    }

    public Expr lhs() {
	return lhs;
    }

    public Expr rhs() {
	return rhs;
    }

    public abstract BigDecimal eval(SymbolTable symbolTable) throws EvaluateExeption;

    @Override
    public Context checkType(Context context) {
	context = lhs.checkType(context);
	context = rhs.checkType(context);
	
	SymbolTable symbolTable = context.getSymbolTable();

	if (!isCompatible(lhs.getType(symbolTable), rhs.getType(symbolTable), symbolTable)) {  
	    context.addError(new ExprTypeError(line, 
		    lhs.getType(context.getSymbolTable()),
		    rhs.getType(context.getSymbolTable()),
		    getType(context.getSymbolTable())));
	}
	return context;
    }
    
    protected boolean isCompatible(Type type1, Type type2, Context symbolTable) {
	return getType(symbolTable).isCompatible(type2) 
		&& getType(symbolTable).isCompatible(type1) 
		&& type1.isCompatible(type2);
    }
}
