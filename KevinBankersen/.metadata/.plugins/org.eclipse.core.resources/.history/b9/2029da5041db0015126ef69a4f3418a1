package eu.bankersen.kevin.ql.util.testing;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;

import eu.bankersen.kevin.ql.ast.Type;
import eu.bankersen.kevin.ql.context.Symbol;
import eu.bankersen.kevin.ql.context.SymbolTable;

public class QuestionExample extends JPanel implements DataListener {

    private final JPanel mainPanel;
    private final JFormattedTextField txField;
    private final String panelName;
    private final Type type;
    private final JLabel question;

    private List<ViewListener> ui = new ArrayList<ViewListener>();


    public QuestionExample(Symbol object) {
	this.panelName = object.getName();
	this.type = object.getType();

	mainPanel = new JPanel(new GridBagLayout());
	mainPanel.setVisible(object.getActive());
	mainPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5)));

	GridBagConstraints gbc = new GridBagConstraints();

	question = new JLabel("<html><p>" + object.getQuestion() + "</p></html>", JLabel.LEFT);
	gbc.anchor = GridBagConstraints.WEST;
	gbc.gridwidth = 1;
	gbc.gridheight = 1;
	gbc.weightx = 1.0;
	gbc.weighty = 1.0;
	gbc.insets = new Insets(5, 0, 5, 5);

	mainPanel.add(question, gbc);

	txField = new JFormattedTextField();
	txField.addKeyListener(jTextListener());

	//txField.setPreferredSize(new Dimension(100, 15));
	gbc.anchor = GridBagConstraints.EAST;
	gbc.weightx = 0.1;
	gbc.gridx = 1;
	mainPanel.add(txField, gbc);

	add(mainPanel);
    }

    public void addUIListener(ViewListener toAdd) {
	ui.add(toAdd);
    }

    @Override
    public void dataUpdate(SymbolTable symbolTable) {
	Symbol data = symbolTable.getSymbol(panelName);
	mainPanel.setVisible(data.getActive());

	// Update the view.
	QuestionExample.this.mainPanel.revalidate();
	QuestionExample.this.mainPanel.repaint();
    }

    private void viewUpdate(Object value) {
	ui.forEach(l -> l.viewUpdate(panelName, value));
    }

    private KeyListener jTextListener() {
	return new KeyListener() {

	    @Override
	    public void keyTyped(KeyEvent e) {
	    }

	    @Override
	    public void keyReleased(KeyEvent e) {

		JFormattedTextField field = (JFormattedTextField) e.getSource();

		if (field.getText().equals("")) {
		    viewUpdate("Empty");
		} else {
		    viewUpdate(returnData(field.getText()));
		}
		QuestionExample.this.mainPanel.revalidate();
		QuestionExample.this.mainPanel.repaint();
	    }

	    @Override
	    public void keyPressed(KeyEvent e) {
	    }
	};
    }

    private Object returnData(String data) {
	switch(type){
	case BOOLEAN : return data.equals("true") || data.equals("false") ? Boolean.valueOf(data) : Type.EMPTY;
	case INTEGER : return Integer.valueOf(data);
	default : return data;
	}
    }

}
