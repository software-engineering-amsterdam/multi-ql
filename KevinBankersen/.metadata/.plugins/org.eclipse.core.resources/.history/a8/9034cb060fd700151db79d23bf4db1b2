package eu.bankersen.kevin.ql.ast;

import com.esotericsoftware.minlog.Log;

import eu.bankersen.kevin.ql.ast.expr.Expr;
import eu.bankersen.kevin.ql.context.Context;
import eu.bankersen.kevin.ql.context.Errors;
import eu.bankersen.kevin.ql.context.EvaluateExeption;
import eu.bankersen.kevin.ql.context.TypeError;

public class Variable {

    private final String name;
    private final Type type;
    private final int line;
    private final Expr expr;
    private Object value;

    public Variable(String name, Type type, Expr expr, int line) {
	this.name = name;
	this.type = type;
	this.expr = expr;
	this.line = line;
	this.value = Type.EMPTY;
    }

    public String getName() {
	return name;
    }

    public Type getType() {
	return type;
    }

    public Context checkType(Context context) {

	if (context.checkID(name)) {
	    context.addError(new TypeError(line, name));
	} else {
	    context.addSymbol(name, type, value);
	}

	context = expr.checkType(context);
	
	if (!expr.getType(context).equals(type))) {
	    context.addError(new TypeError(line, getType(), expr.getType(context));
	}
	return context;
    }

    public Object getValue() {
	return value;
    }

    public String toString() {
	return this.getName() + ": " + this.getType() + "=" + this.getValue();
    }

    public Context eval(Context context) {

	try {
	    value = expr.eval(context);
	    context.updateSymbol(name, value);
	} catch (EvaluateExeption  e) {
	    Log.debug("Cannot evaluate expression yet");
	}
	return context;
    }
}
