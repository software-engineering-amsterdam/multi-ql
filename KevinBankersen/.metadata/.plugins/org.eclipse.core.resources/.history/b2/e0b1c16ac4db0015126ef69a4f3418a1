package eu.bankersen.kevin.ql.util.testing.widget;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFormattedTextField;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

import eu.bankersen.kevin.ql.ast.Type;
import eu.bankersen.kevin.ql.context.Symbol;
import eu.bankersen.kevin.ql.context.SymbolTable;
import eu.bankersen.kevin.ql.util.testing.QuestionExample;
import eu.bankersen.kevin.ql.util.testing.ViewListener;

public class BoxWidget implements Widget {

    private final String name;
    private final JPanel panel;
    private final Type type;
    private final JFormattedTextField inputField;
    private final List<Widget> widgetListeners;

    BoxWidget(Symbol data) {
	this.name = data.getName();
	this.type = data.getType();
	this.panel = new JPanel();
	widgetListeners = new ArrayList<>();


    }

    private Object returnValue(String data) {
	if (type.equals(Type.BOOLEAN)) {
	    return Boolean.valueOf(data);
	}
    }

    @Override
    public JPanel build() {
	return new JPanel();
    }

    @Override
    public void dataUpdate(SymbolTable symbolTable) {
	// TODO Auto-generated method stub

    }

    @Override
    public void widgetUpdate(Object value) {
	// TODO Auto-generated method stub

    }

    @Override
    public void addWidgetListener(Widget listener) {
	// TODO Auto-generated method stub

    }
    class BoxListener implements KeyListener {

	@Override
	public void keyTyped(KeyEvent e) {
	}

	@Override
	public void keyReleased(KeyEvent e) {

	    JFormattedTextField field = (JFormattedTextField) e.getSource();

	    if (type.equals(Type.BOOLEAN)){
		if (field.getText().equalsIgnoreCase("true") || field.getText().equalsIgnoreCase("false"))){
		    widgetUpdate(returnValue(field.getText()));
		}
	    } else {
		widgetUpdate(returnValue(field.getText()));
	    }

	    BoxWidget.this.panel.revalidate();
	    BoxWidget.this.panel.repaint();
	}

	@Override
	public void keyPressed(KeyEvent e) {
	}

    }
}
