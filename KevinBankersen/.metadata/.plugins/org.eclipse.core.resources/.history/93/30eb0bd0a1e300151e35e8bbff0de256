package eu.bankersen.kevin.ql.ast;

import eu.bankersen.kevin.ql.ast.expr.BooleanExpr;
import eu.bankersen.kevin.ql.ast.expr.Expr;
import eu.bankersen.kevin.ql.ast.expr.NumberExpr;
import eu.bankersen.kevin.ql.ast.expr.logic.And;
import eu.bankersen.kevin.ql.ast.expr.logic.Eq;
import eu.bankersen.kevin.ql.ast.expr.logic.GEq;
import eu.bankersen.kevin.ql.ast.expr.logic.GT;
import eu.bankersen.kevin.ql.ast.expr.logic.LEq;
import eu.bankersen.kevin.ql.ast.expr.logic.LT;
import eu.bankersen.kevin.ql.ast.expr.logic.NEq;
import eu.bankersen.kevin.ql.ast.expr.logic.Not;
import eu.bankersen.kevin.ql.ast.expr.logic.Or;
import eu.bankersen.kevin.ql.ast.expr.math.Add;
import eu.bankersen.kevin.ql.ast.expr.math.Div;
import eu.bankersen.kevin.ql.ast.expr.math.Mul;
import eu.bankersen.kevin.ql.ast.expr.math.Neg;
import eu.bankersen.kevin.ql.ast.expr.math.Pos;
import eu.bankersen.kevin.ql.ast.expr.math.Sub;
import eu.bankersen.kevin.ql.ast.form.Body;
import eu.bankersen.kevin.ql.ast.form.Form;
import eu.bankersen.kevin.ql.ast.stat.AbstractQuestion;
import eu.bankersen.kevin.ql.ast.stat.AbstractStatement;
import eu.bankersen.kevin.ql.ast.stat.ComputedQuestion;
import eu.bankersen.kevin.ql.ast.stat.ElseStatement;
import eu.bankersen.kevin.ql.ast.stat.IFStatement;
import eu.bankersen.kevin.ql.ast.stat.NormalQuestion;

public interface Visitor {

    void visit(Form o);

    void visit(Body o);
    
    void visit(AbstractStatement o);

    void visit(IFStatement o);
    
    void visit(ElseStatement o);
    
    void visit(AbstractQuestion o);

    void visit(NormalQuestion o);

    void visit(ComputedQuestion o);
    
    void visit(Expr o);
    
    void visit(NumberExpr o);

    void visit(Sub o);

    void visit(Add o);

    void visit(Div o);

    void visit(Mul o);

    void visit(Pos o);

    void visit(Neg o);
    
    void visit(BooleanExpr o);

    void visit(Or o);

    void visit(And o);

    void visit(Eq o);

    void visit(GEq o);

    void visit(GT o);

    void visit(LEq o);

    void visit(LT o);

    void visit(NEq o);

    void visit(Not o);

    void visit(Identifier o);

    void visit(Literal o);







}
