package eu.bankersen.kevin.ql;

import java.io.IOException;
import java.util.Arrays;

import org.antlr.v4.runtime.tree.gui.TreeViewer;

import com.esotericsoftware.minlog.Log;

import eu.bankersen.kevin.ql.ast.form.Form;
import eu.bankersen.kevin.ql.parser.FormParser;
import eu.bankersen.kevin.ql.parser.QLParser.FormContext;
import eu.bankersen.kevin.ql.symboltable.Context;

/**
 * Hello world!
 *
 */
public final class App {
    
    private App() {
    }

    public static void main(final String[] args) {
	Log.INFO(); // Set log level
	Log.setLogger(new CustomLogger()); // Our custom logger.

	System.out.println("Welcome to the Questionnaire Language (QL)!\n");

	String form;

	int selectedForm = 1;
	String resource;

	switch(selectedForm) {
	default: resource = "resources/Tax.form";
	case 1 : resource = "resources/Tax2.form";
	}

	try { // Currently the top level so here we catch exceptions.
	    form = new FileReader().read(resource);
	} catch (IOException e) {
	    Log.error("Unable to read file, Terminating");
	    System.exit(1);
	    form = null;
	}

	FormParser parser = new FormParser(form);

	Form parsedForm = parser.getForm();

	if (parser.getParseErrors() > 0) {
	    Log.error("Parse Errors, Terminating!");
	    System.exit(1);
	} else {
	    Log.info("File Parsed");
	}

	FormContext formContext = parser.getFormContext();
	Context context = Context.getInstance();

	/*
	 * This is Lame code for prototyping.
	 */


	// Show UI
	boolean show = false;
	if (show) {
	    Log.info("Build view");
	    TreeViewer viewr = new TreeViewer(Arrays.asList(parser.getParseRules()), formContext);
	    viewr.setScale(1.5); // scale a little
	    viewr.open(); // Open the viewer
	}


	// Trying to type check.
	Log.info("Type Check Start");
	if (false) { //!parsedForm.checkType()
	    context.getErrors().forEach(error -> Log.error(error.toString()));
	    Log.error("Type Check error, Terminating!");
	    System.exit(1);
	} else {
	    Log.info("Type Check succesful");
	}
	
	parsedForm.checkType();

	Log.debug(parsedForm.toString());

	Log.debug(SingletonSymbolTabel.getContents());

	Boolean y = true;
	Integer z = 5;
	Integer q = 150;

	Log.info("Doing random weird stuff");

	if (selectedForm == 0) {
	    SingletonSymbolTabel.updateValue("hasBoughtHouse", z);
	    parsedForm.eval();
	    Log.info(SingletonSymbolTabel.getContents());

	    SingletonSymbolTabel.updateValue("hasMaintLoan", y);
	    parsedForm.eval();
	    Log.info(SingletonSymbolTabel.getContents());

	    SingletonSymbolTabel.updateValue("privateDebt", q);
	    parsedForm.eval();
	    Log.info(SingletonSymbolTabel.getContents());
	} else if (selectedForm == 1) {

	    Log.info("Starting State");
	    parsedForm.eval(); // Initialize the form
	    Log.info(parsedForm.toString());

	    Log.info("Awnser european: yes");
	    SingletonSymbolTabel.updateValue("european", new Boolean(true));
	    parsedForm.eval();
	    Log.info(parsedForm.toString());

	    Log.info("Awnser name: Kevin");
	    SingletonSymbolTabel.updateValue("name", new String("Kevin"));
	    parsedForm.eval();
	    Log.info(parsedForm.toString());

	    Log.info("Awnser age: 26");
	    SingletonSymbolTabel.updateValue("age", new Integer(26));
	    parsedForm.eval();
	    Log.info(parsedForm.toString());

	    Integer age = 4;
	    Log.info("Awnser startSchool: " + age.toString());
	    SingletonSymbolTabel.updateValue("startSchool", age);
	    parsedForm.eval();
	    Log.info(parsedForm.toString());

	    Log.info(parsedForm.toString());


	}

    }
}
