package eu.bankersen.kevin.ql.ast.stat;

import eu.bankersen.kevin.ql.ast.expr.EvaluateExeption;
import eu.bankersen.kevin.ql.ast.expr.Expr;
import eu.bankersen.kevin.ql.ast.form.Body;
import eu.bankersen.kevin.ql.ast.type.BooleanType;
import eu.bankersen.kevin.ql.ast.type.Type;
import eu.bankersen.kevin.ql.context.Context;
import eu.bankersen.kevin.ql.context.SymbolTableBuilder;
import eu.bankersen.kevin.ql.context.errors.ExprTypeError;
import eu.bankersen.kevin.ql.context.symboltable.SymbolTable;

public class IFStat extends Statement  {

    private final Expr expr;
    private final Type type;
    private final Body body;
    private final int line;

    public IFStat(Expr expression, Body body, int line) {
	super(false);
	this.expr = expression;
	this.type = new BooleanType();
	this.body = body;
	this.line = line;
    }

    public Context checkType(Context context) {
	return context.evaluate(this);
    }
    
    public Body body() {
	return body;
    }
    
    public Expr expr() {
	return expr;
    }
    
    public int line() {
	return line;
    }

    public SymbolTable evalStatement(SymbolTable symbolTable) {	
	boolean exprValue;
	
	try {
	    exprValue = (Boolean) expr.eval(symbolTable);
	} catch (EvaluateExeption e) {
	    exprValue = false;
	}

	if (exprValue) {
	    symbolTable = visible(symbolTable, true);
	    return body.evalBody(symbolTable);
	} else {
	    return visible(symbolTable, false);
	} 
    }

    public SymbolTable visible(SymbolTable symbolTable, Boolean visible) {
	return body.visible(symbolTable, visible);
    }
    
    @Override
    public SymbolTableBuilder buildSymbolTable(SymbolTableBuilder builder) {
	return body.buildSymbolTable(builder);
    }
}
