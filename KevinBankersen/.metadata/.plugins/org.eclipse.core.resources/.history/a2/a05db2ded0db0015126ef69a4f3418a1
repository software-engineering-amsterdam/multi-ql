package eu.bankersen.kevin.ql.util.testing.widget;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JLabel;
import javax.swing.JPanel;

import eu.bankersen.kevin.ql.ast.Type;
import eu.bankersen.kevin.ql.context.Symbol;
import eu.bankersen.kevin.ql.context.SymbolTable;
import eu.bankersen.kevin.ql.util.testing.ViewListener;

public class QuestionWidget implements Widget {
    
    private final String name;
    private final JPanel questionContainer;
    private final Widget questionInput;
    private final List<ViewListener> viewListeners;
    private final List<Widget> widgetListeners;
    
    public QuestionWidget(Symbol data) {
	
	viewListeners = new ArrayList<>();
	widgetListeners = new ArrayList<>();
	name = data.getName();
	
	questionContainer = new JPanel(new BorderLayout());
	questionContainer.setVisible(data.getActive());
	
	JLabel questionText = new JLabel("<html><p>" + "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab</p></html>");//+ data.getQuestion() + "</p></html>");
	questionText.setPreferredSize(new Dimension(290, 25));
	
	questionContainer.add(questionText, BorderLayout.WEST);
	
	if (data.getType().equals(Type.BOOLEAN)) {
	    questionInput = new DropdownWidget(data);    
	} else {
	    questionInput = new BoxWidget(data);
	}
	
	questionInput.addWidgetListener(this);
	
	questionContainer.add(questionInput.build(), BorderLayout.EAST);
    }

    @Override
    public JPanel build() {
	return questionContainer;
    }

    @Override
    public void dataUpdate(SymbolTable symbolTable) {
	questionContainer.setVisible(symbolTable.getSymbol(name).getActive());
	questionInput.dataUpdate(symbolTable);
	
	// Update the view.
	QuestionWidget.this.questionContainer.revalidate();
	QuestionWidget.this.questionContainer.repaint();
    }

    @Override
    public void widgetUpdate(Object value) {
	viewListeners.forEach(l -> l.viewUpdate(name, value));	
    }

    public void addUIListener(ViewListener listener) {
	viewListeners.add(listener);
    }

    @Override
    public void addWidgetListener(Widget listener) {
	widgetListeners.add(listener);
    }

}
