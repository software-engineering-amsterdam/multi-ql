package eu.bankersen.kevin.ql.ast.type.value;

import java.math.BigDecimal;

public class NumberObject extends QLObject {

    private BigDecimal value;
    private Boolean bool;
    
    @Override
    public QLObject subtract(QLObject o) {
	value.subtract((BigDecimal) o.value());
	return this;
    }

    @Override
    public QLObject add(QLObject o) {
	value.add((BigDecimal) o.value());
	return this;
    }

    @Override
    public QLObject divide(QLObject o) {
	value.divide((BigDecimal) o.value());
	return this;
    }

    @Override
    public QLObject multiply(QLObject o) {
	value.multiply((BigDecimal) o.value());
	return this;
    }

    @Override
    public QLObject absolute() {
	value.abs();
	return this;
    }

    @Override
    public QLObject negate() {
	value.negate();
	return this;
    }

    @Override
    public QLObject or(QLObject o) {
	return null;
    }

    @Override
    public QLObject and(QLObject o) {
	return null;
    }

    @Override
    public QLObject equal(QLObject o) {
	value.compareTo(val)((BigDecimal) o.value());
	return this;
    }

    @Override
    public QLObject greaterOrEqual(QLObject o) {
	value.subtract((BigDecimal) o.value());
	return this;
    }

    @Override
    public QLObject greater(QLObject o) {
	value.subtract((BigDecimal) o.value());
	return this;
    }

    @Override
    public QLObject lowerOrEqual(QLObject o) {
	value.subtract((BigDecimal) o.value());
	return this;
    }

    @Override
    public QLObject lower(QLObject o) {
	value.subtract((BigDecimal) o.value());
	return this;
    }

    @Override
    public QLObject notEqual(QLObject o) {
	value.subtract((BigDecimal) o.value());
	return this;
    }

    @Override
    public QLObject not(QLObject o) {
	value.subtract((BigDecimal) o.value());
	return this;
    }

    @Override
    public Object value() {
	if (bool != null) {
	    return value;
	} else {
	    return bool;
	}
    }

    @Override
    public boolean isSimilar(QLObject type) {
	return type instanceof NumberObject || type instanceof IntegerObject;
    }

    @Override
    public void valueOf(String value) {
	this.value = new BigDecimal(value);
    }

    @Override
    public void valueOf(BigDecimal value) {
	this.value = value;
	
    }

    @Override
    public void valueOf(Boolean value) {
	this.value = value ? new BigDecimal(0) : new BigDecimal(1);
    }

    @Override
    public void valueOf(QLObject value) {
	this.value = ((NumberObject) value).value();
	
    }
}
