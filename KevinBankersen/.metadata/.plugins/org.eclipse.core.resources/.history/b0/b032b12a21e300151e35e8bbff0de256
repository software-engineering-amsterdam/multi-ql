package eu.bankersen.kevin.ql.context.symboltable;

import eu.bankersen.kevin.ql.ast.Identifier;
import eu.bankersen.kevin.ql.ast.Literal;
import eu.bankersen.kevin.ql.ast.Visitor;
import eu.bankersen.kevin.ql.ast.expr.logic.And;
import eu.bankersen.kevin.ql.ast.expr.logic.Eq;
import eu.bankersen.kevin.ql.ast.expr.logic.GEq;
import eu.bankersen.kevin.ql.ast.expr.logic.GT;
import eu.bankersen.kevin.ql.ast.expr.logic.LEq;
import eu.bankersen.kevin.ql.ast.expr.logic.LT;
import eu.bankersen.kevin.ql.ast.expr.logic.NEq;
import eu.bankersen.kevin.ql.ast.expr.logic.Not;
import eu.bankersen.kevin.ql.ast.expr.logic.Or;
import eu.bankersen.kevin.ql.ast.expr.math.Add;
import eu.bankersen.kevin.ql.ast.expr.math.Div;
import eu.bankersen.kevin.ql.ast.expr.math.Mul;
import eu.bankersen.kevin.ql.ast.expr.math.Neg;
import eu.bankersen.kevin.ql.ast.expr.math.Pos;
import eu.bankersen.kevin.ql.ast.expr.math.Sub;
import eu.bankersen.kevin.ql.ast.form.Body;
import eu.bankersen.kevin.ql.ast.form.Form;
import eu.bankersen.kevin.ql.ast.stat.AbstractStatement;
import eu.bankersen.kevin.ql.ast.stat.ComputedQuestion;
import eu.bankersen.kevin.ql.ast.stat.ElseStatement;
import eu.bankersen.kevin.ql.ast.stat.IFStatement;
import eu.bankersen.kevin.ql.ast.stat.NormalQuestion;

public abstract class AbstractVisitor implements Visitor {

    @Override
    public void visit(Form form) {	
    }

    @Override
    public void visit(Body body) {
    }

    @Override
    public void visit(IFStatement ifStatement) {
    }

    @Override
    public void visit(NormalQuestion normalQuestion) {
    }

    @Override
    public void visit(ComputedQuestion computedQuestion) {
    }

    @Override
    public void visit(ElseStatement elseStatement) {
    }

    @Override
    public void visit(AbstractStatement abstractStatement) {
    }

    @Override
    public void visit(Sub sub) {
    }

    @Override
    public void visit(Add add) {
    }

    @Override
    public void visit(Div div) {
    }

    @Override
    public void visit(Mul mul) {
    }

    @Override
    public void visit(Pos pos) {
    }

    @Override
    public void visit(Neg neg) {
    }

    @Override
    public void visit(Or or) {
    }

    @Override
    public void visit(And and) {
    }

    @Override
    public void visit(Eq eq) {
    }

    @Override
    public void visit(GEq gEq) {
    }

    @Override
    public void visit(GT gt) {
    }

    @Override
    public void visit(LEq lEq) {
    }

    @Override
    public void visit(LT lt) {
    }

    @Override
    public void visit(NEq nEq) {
    }

    @Override
    public void visit(Not not) {
    }

    @Override
    public void visit(Identifier identifier) {
    }

    @Override
    public void visit(Literal literal) {
    }

}
