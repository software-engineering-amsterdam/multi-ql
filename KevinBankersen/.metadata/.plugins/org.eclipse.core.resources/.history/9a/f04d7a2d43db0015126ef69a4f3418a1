package eu.bankersen.kevin.ql.util.testing;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

import eu.bankersen.kevin.ql.ast.Type;
import eu.bankersen.kevin.ql.context.Symbol;
import eu.bankersen.kevin.ql.context.SymbolTable;

public class BooleanQuestion extends JPanel implements DataListener {

    private final JPanel mainPanel;
    private final String panelName;
    private final Type type;
    private final JLabel question;

    private List<ViewListener> ui = new ArrayList<ViewListener>();


    public BooleanQuestion(Symbol object) {
	this.panelName = object.getName();
	this.type = object.getType();

	mainPanel = new JPanel(new BorderLayout());
	mainPanel.setVisible(object.getActive());
	
	question = new JLabel("<html><p>" + object.getQuestion() + "</p></html>");
	//question.setPreferredSize(new Dimension(290, 50));
	question.setMaximumSize(new Dimension(290, 50));
	mainPanel.add(question, BorderLayout.WEST);

	JPanel bool = new JPanel();
	//bool.setPreferredSize(new Dimension(200,50));
	bool.setMaximumSize(new Dimension(200, 50));
	ButtonGroup group = new ButtonGroup();
	JRadioButton a = new JRadioButton("True");
	JRadioButton b = new JRadioButton("False");


	ActionListener sliceActionListener = new ActionListener() {		
	    public void actionPerformed(ActionEvent actionEvent) {
		AbstractButton aButton = (AbstractButton) actionEvent.getSource();
		viewUpdate(Boolean.valueOf(aButton.getText()));
	    }
	};

	a.addActionListener(sliceActionListener);
	b.addActionListener(sliceActionListener);
	group.add(a);
	group.add(b);
	bool.add(a,BorderLayout.WEST);
	bool.add(b,BorderLayout.EAST);


	mainPanel.add(bool, BorderLayout.EAST);

	add(mainPanel);
    }

    public void addUIListener(ViewListener toAdd) {
	ui.add(toAdd);
    }

    @Override
    public void dataUpdate(SymbolTable symbolTable) {
	Symbol data = symbolTable.getSymbol(panelName);
	mainPanel.setVisible(data.getActive());

	// Update the view.
	BooleanQuestion.this.mainPanel.revalidate();
	BooleanQuestion.this.mainPanel.repaint();
    }

    private void viewUpdate(Object value) {
	ui.forEach(l -> l.viewUpdate(panelName, value));
    }

}
