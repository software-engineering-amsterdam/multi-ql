package eu.bankersen.kevin.ql.ast;

import eu.bankersen.kevin.ql.ast.expr.Expr;
import eu.bankersen.kevin.ql.context.Context;
import eu.bankersen.kevin.ql.context.EvaluateExeption;

public class Variable {

    private final String name;
    private final Type type;
    private final int line;
    private final Context context;
    private Expr expr;

    public Variable(String name, Type type, Expr expr, int line) {
	context = Context.getInstance();
	this.name = name;
	this.type = type;
	this.expr = expr;
	this.line = line;
    }

    public String getName() {
	return name;
    }

    public Type getType() {
	return type;
    }

    public void checkType() {

	if (context.checkID(name)) {
	    context.addError("TYPE_ERROR @Line " + line 
		    			+ " question " + name + " already defined!");
	} else {
	    context.addSymbol(name, type);
	}

	expr.checkType();
	
	if (!expr.getType().equals(type)) {
	    context.addError("TYPE_ERROR @Line " + line 
		    			+ ": expected " + type 
		    			+ " got " + expr.getType() + "!");
	}
    }

    public Object getValue() {
	return context.getSymbol(name).getValue();
    }

    public String toString() {
	return this.getName() + ": " + this.getType() + "=" + this.getValue();
    }

    public void eval() {

	try {
	    Object value = expr.eval();
	    context.updateSymbol(name, value);
	} catch (EvaluateExeption  e) {
	    context.updateSymbol(name, null);
	    break;
	}
    }
}
