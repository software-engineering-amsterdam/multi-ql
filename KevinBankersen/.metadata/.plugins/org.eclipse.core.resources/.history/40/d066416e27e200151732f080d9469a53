package eu.bankersen.kevin.ql.symbol_table;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import eu.bankersen.kevin.ql.ast.Identifier;
import eu.bankersen.kevin.ql.ast.expr.Expr;
import eu.bankersen.kevin.ql.ast.stat.Question;
import eu.bankersen.kevin.ql.ast.type.Type;
import eu.bankersen.kevin.ql.context.Symbol;

public class SymbolTableBuilder implements SymbolTableBuilderInterface {

    private Map<String, List<Symbol>> symbolTable;

    private SymbolTableBuilder builder;

    public SymbolTableBuilder() {
	symbolTable = new LinkedHashMap<>();
    }

    public Map<String, List<Symbol>> getSymbolTable() {
	return symbolTable;
    }

    public void addSymbol(Boolean computed, String name, String question, Type type) {
	Symbol symbol = new Symbol(computed, name, question, type, null);
	List<Symbol> tempList;
	if (symbolTable.containsKey(name)) {
	    tempList = symbolTable.get(name);
	    tempList.add(symbol);
	} else {
	    tempList = new ArrayList<>();
	    tempList.add(symbol);
	}
	symbolTable.put(name, tempList);
    }

    @Override
    public SymbolTableBuilder construct(Identifier data) {
	builder = this;
	return builder;
    }

    @Override
    public SymbolTableBuilder construct(Question data) {
	builder = this;

	builder = data.expr().buildSymbolTable(builder);

	builder.addSymbol(data.isComputed(), data.getName(), data.getText(), data.getType());

	System.out.println(builder.getSymbolTable().getSymbol(data.getName()).getQuestion()); //For debugging.

	return builder;
    }

    @Override
    public SymbolTableBuilder construct(Expr data) {
	builder = this;
	if (data.lhs() != null) {
	    builder = data.lhs().buildSymbolTable(builder);
	} 
	if (data.rhs() != null) {
	    builder = data.rhs().buildSymbolTable(builder);
	}
	return builder;
    }
}
