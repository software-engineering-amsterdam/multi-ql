package eu.bankersen.kevin.ql.context;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import eu.bankersen.kevin.ql.ast.Type;
import eu.bankersen.kevin.ql.util.testing.DataListener;
import eu.bankersen.kevin.ql.util.testing.ViewListener;

public class SymbolTable implements ViewListener {
    
    private final String name;
    private final Map<String, Symbol> symbolTable;
    private List<DataListener> dataListeners;
    
    public SymbolTable(String name) {
	this.name = name;
	symbolTable = new HashMap<>();
    }
    
    public Symbol getSymbol(String symbol) {
	return symbolTable.get(symbol);
    }
    
    public Boolean checkID(String name) {
	return symbolTable.containsKey(name);
    }
    
    public void addSymbol(String symbol, Type type, Object value) {
	symbolTable.put(symbol, new Symbol(type, value));
    }
    
    public void updateSymbol(String name, Object value) {
	Symbol symbol = symbolTable.get(name);
	symbol.setValue(value);
	symbolTable.put(name, symbol);
    }
    
    public void setVisibility(String name, Boolean active) {
	Symbol symbol = symbolTable.get(name);
	symbol.setActive(active);
	symbolTable.put(name, symbol);
    }
    
    
    public void addDataListener(DataListener listener) {
	dataListeners.add(listener);
    }
    
    private void dataUpdate() {
	dataListeners.forEach(listener -> listener.dataUpdate(symbolTable));
    }

    @Override
    public void viewUpdate(Object data) {
	String[] object = (String[]) data;
	updateSymbol(object[0], object[1]);
	dataUpdate();
    }
    
    

}
