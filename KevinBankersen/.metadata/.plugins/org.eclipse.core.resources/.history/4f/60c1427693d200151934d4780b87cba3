package eu.bankersen.kevin.ql.symboltable;

import java.util.ArrayList;
import java.util.HashMap;

import com.esotericsoftware.minlog.Log;

import eu.bankersen.kevin.ql.ast.Type;

public final class SymbolTabel {

    private static HashMap<String, SymbolTableObject> tableList = new HashMap<>();
    private static ArrayList<String> errorList = new ArrayList<String>();

    public static void addVariable(final String name, final Type type) {
	tableList.put(name, new SymbolTableObject(type));
    }

    public static Type getType(final String name) {
	try {	 
	    return tableList.get(name).getType();
	} catch (NullPointerException e) {
	    Log.error("Object " + name + " not found");
	    errorList.add(name);
	    return Type.UNDIFINED;
	}
    }

    public static Object getValue(final String name) {
	return tableList.get(name).getValue();
    }
    
    public static void updateValue(String name, Object value){
	
	//Log.debug("Updating " + name + " with " + value.toString());
	
	SymbolTableObject object = tableList.get(name);
	
	object.setValue(value);
	tableList.put(name, object);
    }

    public static String getContents() {
	return tableList.toString();
    }

    public static void addError(final String error) {
	Log.error(error);
	errorList.add(error);
    }
    
    public static ArrayList<String> getErrors(){
	return errorList;
    }

    private SymbolTabel() {
    }
}

class SymbolTableObject {

    private final Type type;
    private Object value;


    SymbolTableObject(final Type type) {
	Log.debug("Added: " + type.toString());
	this.type = type;
    }

    public Type getType() {
	Log.debug("Requested: " + type.toString());
	return type;
    }

    public Object getValue() {
	return value;
    }
    
    public void setValue(Object value) {
	this.value = value;
    }

    @Override
    public String toString() {
	return type.toString() + " : " + value;

    }
}
